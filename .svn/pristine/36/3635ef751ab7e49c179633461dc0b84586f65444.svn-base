using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using VMP.Library;

namespace VMP_1._0.Admin
{
    public partial class vmpAdmRules : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                MultiViewRules.SetActiveView(ViewAddRules);
                Loadcolumns();
                checkActive();
                LoadSingleRules();
            }
        }

        private void checkActive()
        {
            if (MultiViewRules.ActiveViewIndex == 0)
            {
                liCombinedRules.Attributes.Remove("class");
                liViewRules.Attributes.Remove("class");
                liAddRules.Attributes.Add("class", "active");
            }
            if (MultiViewRules.ActiveViewIndex == 1)
            {
                liAddRules.Attributes.Remove("class");
                liViewRules.Attributes.Remove("class");
                liCombinedRules.Attributes.Add("class", "active");
            }
            if (MultiViewRules.ActiveViewIndex == 2)
            {
                liAddRules.Attributes.Remove("class");
                liCombinedRules.Attributes.Remove("class");
                liViewRules.Attributes.Add("class", "active");
            }
        }

        protected void ddlTable_SelectedIndexChanged(object sender, EventArgs e)
        {
            Loadcolumns();
        }

        private void LoadSingleRules()
        {
            string qur = "SELECT ruleID,ruleName,columnName + condition+ value as 'Rule' FROM Rules where status = '-1'and isActive = 1 and isHardcodedRule = 0";
            DataSet ds = dbLibrary.idGetCustomResult(qur);
            rptRules.DataSource = ds;
            rptRules.DataBind();
        }

        private void Loadcolumns()
        {
            string qur = "select COLUMN_NAME,DATA_TYPE from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = '" + ddlTable.SelectedValue + "'";
            DataSet ds = dbLibrary.idGetCustomResult(qur);
            if (ds != null)
            {
                ddlColumn.DataValueField = "COLUMN_NAME";
                ddlColumn.DataTextField = "COLUMN_NAME";
                ddlColumn.DataSource = ds;
                ddlColumn.DataBind();
                ViewState["ColumnSchema"] = ds;
            }
        }

        protected void ddlColumn_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (isBitColumnType() == "bit")
            {
                divValue.Attributes.Add("style", "margin-top: 10px; display:none;");
                divBit.Attributes.Add("style", "margin-top: 10px; display:block;");
                RequiredFieldValidator2.Enabled = false;
            }
            else
            {
                divValue.Attributes.Add("style", "margin-top: 10px; display:block;");
                divBit.Attributes.Add("style", "margin-top: 10px; display:none;");
                RequiredFieldValidator2.Enabled = true;
            }
        }

        private string isBitColumnType()
        {
            DataSet ds = (DataSet)ViewState["ColumnSchema"];
            DataTable dtColumns = ds.Tables[0];
            var columnType = from DataRow myRow in dtColumns.Rows
                             where (string)myRow["COLUMN_NAME"] == ddlColumn.SelectedValue.ToString()
                             select myRow["DATA_TYPE"];
            return columnType.ElementAt(0).ToString();
        }

        protected void ddlStatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddlStatus.SelectedValue == "-1")
            {
                divIndRules.Attributes.Add("style", "display:none;");
                chkTarget.Checked = false;
                chkVeteran.Checked = false;
                chkEDR.Checked = false;
                txtDescription.Text = string.Empty;
            }
            else
            {
                divIndRules.Attributes.Add("style", "display:block;");
            }
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            bool saveRule = true;
            if (ddlStatus.SelectedValue != "-1" && ((!chkTarget.Checked && !chkVeteran.Checked && !chkTarget.Checked) || (ddlStatus.SelectedValue != "-1" && txtDescription.Text.Trim() == string.Empty)))
            {
                saveRule = false;
            }
            if (saveRule)
            {
                string qur = dbLibrary.idBuildQuery("[proc_SaveRule]", txtRuleName.Text.ToString(), chkTarget.Checked.ToString(), chkVeteran.Checked.ToString(), chkEDR.Checked.ToString(), ddlTable.SelectedValue.ToString(), ddlColumn.SelectedItem.Text.ToString(), ddlCondition.SelectedValue.ToString(), isBitColumnType() != "bit" ? txtValue.Text.ToString() : ddlConditionValue.SelectedItem.Text.ToString(), ddlStatus.SelectedValue.ToString(), txtDescription.Text.ToString());
                dbLibrary.idGetAFieldByQuery(qur);
                Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction1", "runEffect1()", true);
                ClearAll();
            }
            else
            {
                Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction", "preventSave()", true);
            }
        }

        private void ClearAll()
        {
            txtRuleName.Text = string.Empty;
            ddlTable.ClearSelection();
            ddlColumn.ClearSelection();
            ddlCondition.ClearSelection();
            txtValue.Text = string.Empty;
            ddlConditionValue.ClearSelection();
            chkTarget.Checked = false;
            chkVeteran.Checked = false;
            chkEDR.Checked = false;
            txtDescription.Text = string.Empty;
        }

        protected void lnkbtnAddRules_Click(object sender, EventArgs e)
        {
            MultiViewRules.SetActiveView(ViewAddRules);
            checkActive();
        }

        protected void lnkbtnCombinedRules_Click(object sender, EventArgs e)
        {
            MultiViewRules.SetActiveView(ViewCombinedRules);
            checkActive();
            LoadSingleRules();
        }

        protected void lnkbtnViewRules_Click(object sender, EventArgs e)
        {
            MultiViewRules.SetActiveView(ViewRules);
            checkActive();
            LoadViewRulesRepeater();
        }

        private void LoadViewRulesRepeater()
        {
            string qur = "Select * from Rules";
            DataSet ds = dbLibrary.idGetCustomResult(qur);
            rptHardcoded.DataSource = ds;
            rptHardcoded.DataBind();
            rptIndividual.DataSource = ds;
            rptIndividual.DataBind();
            rptCombined.DataSource = ds;
            rptCombined.DataBind();
        }

        protected void chkRule_CheckedChanged(object sender, EventArgs e)
        {
            int count = 0;
            foreach (RepeaterItem item in rptRules.Items)
            {
                if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem)
                {
                    var checkBox = (CheckBox)item.FindControl("chkRule");
                    if (checkBox.Checked)
                        count++;
                }
            }
            if (count > 1)
                btnCSave.Visible = true;
            else
                btnCSave.Visible = false;
        }

        protected void ddlCStatus_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (ddlCStatus.SelectedValue == "-1")
            {
                divErrStatus.Attributes.Add("style", "margin-top: 10px; display:block;");
            }
            else
            {
                divErrStatus.Attributes.Add("style", "margin-top: 10px; display:none;");
            }
        }

        protected void btnCSave_Click(object sender, EventArgs e)
        {
            bool savestatus = true;
            if (txtCRuleName.Text == string.Empty)
            {
                savestatus = false;
                lblCRuleValidate.Text = "Name, ";
            }
            if (ddlCStatus.SelectedValue == "-1")
            {
                savestatus = false;
                lblCRuleValidate.Text = lblCRuleValidate.Text + "Status, ";
            }
            if (!chkCEDR.Checked && !chkCVeteran.Checked && !chkCTG.Checked)
            {
                savestatus = false;
                lblCRuleValidate.Text = lblCRuleValidate.Text + "Type, ";
            }
            if (txtCDescription.Text == string.Empty)
            {
                savestatus = false;
                lblCRuleValidate.Text = lblCRuleValidate.Text + "Description, ";
            }
            if (savestatus)
            {
                string qur = dbLibrary.idBuildQuery("[proc_SaveCombineRule]", txtCRuleName.Text.ToString(), radbtnAnd.Checked.ToString(), ddlCStatus.SelectedValue, chkCTG.Checked.ToString(), chkCVeteran.Checked.ToString(), chkCEDR.Checked.ToString(), txtCDescription.Text.ToString());
                string combineRuleID = dbLibrary.idGetAFieldByQuery(qur);
                DataTable dtCombineRules = new DataTable();
                dtCombineRules.Columns.Add("combinedRuleID");
                dtCombineRules.Columns.Add("ruleID");
                foreach (RepeaterItem item in rptRules.Items)
                {
                    if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem)
                    {
                        var checkBox = (CheckBox)item.FindControl("chkRule");
                        var hdnRuleId = (HiddenField)item.FindControl("hdnRuleId");
                        if (checkBox.Checked)
                        {
                            dtCombineRules.Rows.Add(combineRuleID, hdnRuleId.Value);
                        }
                    }
                }
                if (dtCombineRules.Rows.Count > 0)
                {
                    dbLibrary.idInsertDataTable("[proc_SaveCombineRulesList]", "@CombineRules", dtCombineRules);
                }
                Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction2", "runEffect2()", true);
                ClearCAll();
            }
            else
            {
                lblCRuleValidate.Text = "Rule " + lblCRuleValidate.Text.Substring(0, lblCRuleValidate.Text.Length - 2) + " is Mandatory";
            }
            MultiViewRules.SetActiveView(ViewCombinedRules);
            checkActive();
        }

        private void ClearCAll()
        {
            txtCRuleName.Text = string.Empty;
            txtCDescription.Text = string.Empty;
            ddlCStatus.ClearSelection();
            radbtnAnd.Checked = true;
            radbtnOr.Checked = false;
            chkCTG.Checked = false;
            chkCEDR.Checked = false;
            chkCVeteran.Checked = false;
            foreach (RepeaterItem item in rptRules.Items)
            {
                if (item.ItemType == ListItemType.Item || item.ItemType == ListItemType.AlternatingItem)
                {
                    var checkBox = (CheckBox)item.FindControl("chkRule");
                    if (checkBox.Checked) checkBox.Checked = false;
                }
            }
            btnCSave.Visible = false;
        }

        //protected void rptCombined_ItemDataBound(object sender, RepeaterItemEventArgs e)
        //{
        //    if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        //    {

        //    }
        //}

        //protected void rptIndividual_ItemDataBound(object sender, RepeaterItemEventArgs e)
        //{
        //    if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        //    {
        //    }
        //}

        //protected void rptHardcoded_ItemDataBound(object sender, RepeaterItemEventArgs e)
        //{
        //    if (e.Item.ItemType == ListItemType.Item || e.Item.ItemType == ListItemType.AlternatingItem)
        //    {
        //    }
        //}

        protected void btnHUpdate_Click(object sender, EventArgs e)
        {
            Button btnHUpdate = (Button)sender;
            string ruleId = btnHUpdate.CommandArgument;
            TextBox txtHRuleName = ((Control)sender).Parent.FindControl("txtHRuleName") as TextBox;
            TextBox txtHDescription = ((Control)sender).Parent.FindControl("txtHDescription") as TextBox;
            CheckBox chkHActive = ((Control)sender).Parent.FindControl("chkHActive") as CheckBox;
            // dbLibrary.idUpdateTable("Rule",
            //"RuleId="+ruleId,
            //"IsActive", chkHActive.checked,
            //"RuleName",txtHRuleName.Text,
            //"Description",txtHDescription.Text);
        }

        protected void btnIUpdate_Click(object sender, EventArgs e)
        {
            Button btnIUpdate = (Button)sender;
            string ruleId = btnIUpdate.CommandArgument;
            // dbLibrary.idUpdateTable("");

        }

        protected void btnCUpdate_Click(object sender, EventArgs e)
        {
            Button btnCUpdate = (Button)sender;
            string ruleId = btnCUpdate.CommandArgument;
            // dbLibrary.idUpdateTable("");
        }
    }
}