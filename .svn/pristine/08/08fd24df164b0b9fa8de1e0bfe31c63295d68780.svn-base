using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using VMP.Library;

namespace VMP_1._0.Admin
{
    public partial class vmpAdmHome : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["UserId"] == null)
            {
                Response.Redirect("~/Login.aspx");
            }
        }

        protected void Page_PreRender(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                // Get value from the database for statistics
                string qur = dbLibrary.idBuildQuery("proc_getStatsData", Session["UserId"].ToString(), bool.Parse(Session["isAdmin"].ToString()) ? "1" : "0");
                DataSet ds = dbLibrary.idGetCustomResult(qur);
                ViewState["homeStats"] = ds;
                if (ds.Tables[9].Rows.Count > 0)
                {
                    grdProgress.DataSource = ds.Tables[9];
                    grdProgress.DataBind();
                }
                if (ds.Tables[2].Rows.Count > 0)
                {
                    int black = 0;
                    int hispanic = 0;
                    int asian = 0;
                    int indiginessAmerican = 0;
                    int women = 0;
                    int physicallyDisabled = 0;
                    int veteran = 0;
                    int serviceDisabled = 0;
                    int rehab = 0;
                    int LaborSurplus = 0;
                    int medianIncome = 0;
                    int targetedNeighbor = 0;
                    int enterpriseZone = 0;
                    int minority = 0;
                    int EDR = 0;
                    int totalVeteran = 0;
                    int Total = 0;
                    foreach (DataRow dr in ds.Tables[2].Rows)
                    {
                        if (dr["finalClassification"].ToString().Trim().Length > 0)
                        {
                            string firstLetter = dr["finalClassification"].ToString().Substring(0, 1);
                            switch (firstLetter)
                            {
                                case "B":
                                    black++;
                                    minority++;
                                    Total++;
                                    break;
                                case "H":
                                    hispanic++;
                                    minority++;
                                    Total++;
                                    break;
                                case "A":
                                    asian++;
                                    minority++;
                                    Total++;
                                    break;
                                case "I":
                                    indiginessAmerican++;
                                    minority++;
                                    Total++;
                                    break;
                                case "W":
                                    women++;
                                    Total++;
                                    break;
                                case "D":
                                    physicallyDisabled++;
                                    Total++;
                                    break;
                                case "V":
                                    veteran++;
                                    totalVeteran++;
                                    Total++;
                                    break;
                                case "S":
                                    serviceDisabled++;
                                    totalVeteran++;
                                    Total++;
                                    break;
                                case "R":
                                    rehab++;
                                    LaborSurplus++;
                                    Total++;
                                    break;
                                case "L":
                                    EDR++;
                                    LaborSurplus++;
                                    Total++;
                                    break;
                                case "M":
                                    medianIncome++;
                                    EDR++;
                                    Total++;
                                    break;
                                case "T":
                                    targetedNeighbor++;
                                    EDR++;
                                    Total++;
                                    break;
                                case "E":
                                    enterpriseZone++;
                                    EDR++;
                                    Total++;
                                    break;
                            }
                        }
                    }
                    lblMinority.Text = minority.ToString();
                    lblWomen.Text = women.ToString();
                    lblDisabled.Text = physicallyDisabled.ToString();
                    lblEDR.Text = EDR.ToString();
                    lblVeteran.Text = totalVeteran.ToString();
                    lblTotal.Text = Total.ToString();
                    lblBlackCount.Text = black.ToString();
                    lblAsianCount.Text = asian.ToString();
                    lblIndiginessAmericanCount.Text = indiginessAmerican.ToString();
                    lblHispanicCount.Text = hispanic.ToString();
                    lblVeteranCount.Text = veteran.ToString();
                    lblServiceDisabledCount.Text = serviceDisabled.ToString();
                    lblRehabCount.Text = rehab.ToString();
                    lblLaborSurplusCount.Text = LaborSurplus.ToString();
                    lblMedianIncomeCount.Text = medianIncome.ToString();
                    lblTargetedNeighborCount.Text = targetedNeighbor.ToString();
                    lblEnterpriseZoneCount.Text = enterpriseZone.ToString();
                }
            }
        }

        protected void grdProgress_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            grdProgress.PageIndex = e.NewPageIndex;
            grdProgress.DataSource = ((DataSet)ViewState["homeStats"]).Tables[0];
            grdProgress.DataBind();
        }

        protected void lnkMinorityDetails_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
            divBlack.Attributes.Add("style", "margin-top:10px;display: block;");
            divAsian.Attributes.Add("style", "margin-top:10px;display: block;");
            divHispanic.Attributes.Add("style", "margin-top:10px;display: block;");
            divIndiginessAmerican.Attributes.Add("style", "margin-top:10px;display: block;");
            divVeteran.Attributes.Add("style", "margin-top:10px;display: none;");
            divServiceDisabled.Attributes.Add("style", "margin-top:10px;display: none;");
            divRehab.Attributes.Add("style", "margin-top:10px;display: none;");
            divLaborSurplus.Attributes.Add("style", "margin-top:10px;display: none;");
            divMedianIncome.Attributes.Add("style", "margin-top:10px;display: none;");
            divTargetedNeighbor.Attributes.Add("style", "margin-top:10px;display: none;");
            divEnterpriseZone.Attributes.Add("style", "margin-top:10px;display: none;");
            lblModalHeading.Text = "Vendors By Designation - Minority";
        }

        protected void lnkEDRDetails_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
            divRehab.Attributes.Add("style", "margin-top:10px;display: block;");
            divLaborSurplus.Attributes.Add("style", "margin-top:10px;display: block;");
            divMedianIncome.Attributes.Add("style", "margin-top:10px;display: block;");
            divTargetedNeighbor.Attributes.Add("style", "margin-top:10px;display: block;");
            divEnterpriseZone.Attributes.Add("style", "margin-top:10px;display: block;");
            divBlack.Attributes.Add("style", "margin-top:10px;display: none;");
            divAsian.Attributes.Add("style", "margin-top:10px;display: none;");
            divHispanic.Attributes.Add("style", "margin-top:10px;display: none;");
            divIndiginessAmerican.Attributes.Add("style", "margin-top:10px;display: none;");
            divVeteran.Attributes.Add("style", "margin-top:10px;display: none;");
            divServiceDisabled.Attributes.Add("style", "margin-top:10px;display: none;");
            lblModalHeading.Text = "Vendors By Designation - Economically Disadvantaged";
        }

        protected void lnkbtnVeteranDetails_Click(object sender, EventArgs e)
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Pop", "showModal();", true);
            divVeteran.Attributes.Add("style", "margin-top:10px;display: block;");
            divServiceDisabled.Attributes.Add("style", "margin-top:10px;display: block;");
            divRehab.Attributes.Add("style", "margin-top:10px;display: none;");
            divLaborSurplus.Attributes.Add("style", "margin-top:10px;display: none;");
            divMedianIncome.Attributes.Add("style", "margin-top:10px;display: none;");
            divTargetedNeighbor.Attributes.Add("style", "margin-top:10px;display: none;");
            divEnterpriseZone.Attributes.Add("style", "margin-top:10px;display: none;");
            divBlack.Attributes.Add("style", "margin-top:10px;display: none;");
            divAsian.Attributes.Add("style", "margin-top:10px;display: none;");
            divHispanic.Attributes.Add("style", "margin-top:10px;display: none;");
            divIndiginessAmerican.Attributes.Add("style", "margin-top:10px;display: none;");
            lblModalHeading.Text = "Vendors By Designation - Veteran";
        }
    }
}